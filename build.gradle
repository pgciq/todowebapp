plugins {
    id 'java'
    id 'war'
    id 'org.gretty' version '4.1.2'
}

group = 'io.github.faimoh'
version = '1.0.0'
description = 'Todo Web Application'

// Java version configuration
java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

repositories {
    // Use Aliyun mirrors for faster downloads in China
    maven { url 'https://maven.aliyun.com/repository/public' }
    maven { url 'https://maven.aliyun.com/repository/central' }
    maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
    // Fallback to Maven Central
    mavenCentral()
}

dependencies {
    // Servlet API (provided by container)
    compileOnly 'javax.servlet:javax.servlet-api:4.0.1'
    compileOnly 'javax.servlet.jsp:javax.servlet.jsp-api:2.3.3'
    
    // JSTL
    implementation 'javax.servlet:jstl:1.2'
    implementation 'org.apache.taglibs:taglibs-standard-impl:1.2.5'
    
    // MySQL Connector
    implementation 'mysql:mysql-connector-java:8.0.20'
    
    // H2 Database for development
    implementation 'com.h2database:h2:2.2.224'
    
    // Test dependencies
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:4.6.1'
    testImplementation 'javax.servlet:javax.servlet-api:4.0.1'
}

// Project now uses standard Maven/Gradle directory structure:
// - src/main/java (Java sources)
// - src/main/resources (Configuration files)
// - src/main/webapp (Web content)
// - src/test/java (Test sources)
// - src/test/resources (Test resources)

// Configure WAR task
war {
    archiveBaseName = 'todo'
    archiveVersion = project.version
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Task to copy dependencies to WEB-INF/lib (similar to Ant CopyLibs)
task copyLibs(type: Copy) {
    from configurations.runtimeClasspath
    into 'build/libs/WEB-INF/lib'
    exclude '**/servlet-api*.jar'
    exclude '**/jsp-api*.jar'
}

// Make war task depend on copyLibs
war.dependsOn copyLibs

// Custom task to display project information
task info {
    description = 'Display project information'
    group = 'help'
    doLast {
        println "Project: ${name}"
        println "Version: ${version}"
        println "Java Version: ${java.sourceCompatibility}"
        println "Build Directory: ${buildDir}"
        println "WAR File: todo-${version}.war"
    }
}

// Gretty configuration for development server
gretty {
    httpPort = 8080
    contextPath = '/todo'
    
    // Hot deployment support
    reloadOnClassChange = false
    reloadOnConfigChange = false
}

// Custom deployment tasks for external Tomcat
task deployToTomcat(type: Copy) {
    description = 'Deploy WAR file to Tomcat webapps directory'
    group = 'deployment'
    
    dependsOn war
    
    from war.archiveFile
    into "${System.getProperty('catalina.home', 'I:/dev/tools/apache-tomcat-9.0.107')}/webapps"
    
    // Remove version from WAR filename when deploying
    rename { fileName ->
        if (fileName.endsWith('.war')) {
            return 'todo.war'
        }
        return fileName
    }

    doLast {
        println "Deployed ${war.archiveFileName} as todo.war to Tomcat webapps directory"
        println "Access the application at: http://localhost:8080/todo"
    }
}

// Task to undeploy from Tomcat
task undeployFromTomcat(type: Delete) {
    description = 'Remove application from Tomcat webapps directory'
    group = 'deployment'
    
    def tomcatHome = System.getProperty('catalina.home', 'I:/dev/tools/apache-tomcat-9.0.107')
    delete "${tomcatHome}/webapps/todo.war"
    delete "${tomcatHome}/webapps/todo"
    
    doLast {
        println "Removed todo from Tomcat webapps directory"
    }
}

// Task to restart Tomcat (Windows)
task restartTomcat {
    description = 'Restart Tomcat service (Windows)'
    group = 'deployment'
    
    doLast {
        exec {
            commandLine 'cmd', '/c', 'net stop Tomcat9 && net start Tomcat9'
            ignoreExitValue = true
        }
        println "Tomcat service restarted"
    }
}

// Combined deploy and restart task
task redeployToTomcat {
    description = 'Undeploy, deploy and restart Tomcat'
    group = 'deployment'
    
    dependsOn undeployFromTomcat, deployToTomcat
    
    // Ensure proper task order
    deployToTomcat.mustRunAfter undeployFromTomcat
    
    doLast {
        println "Application redeployed successfully"
        println "Access at: http://localhost:8080/todo"
    }
}

// ============================================================================
// ENVIRONMENT-SPECIFIC BUILD TASKS
// ============================================================================

// Task to build WAR for production with MySQL
task warProd(type: War) {
    archiveBaseName = 'todo-prod'
    archiveVersion = project.version
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    
    // Use production context.xml
    from('src/main/webapp') {
        exclude 'META-INF/context.xml'
    }
    from('src/main/webapp/META-INF/context-prod.xml') {
        into 'META-INF'
        rename { 'context.xml' }
    }
}

// Task to setup development environment (H2)
task setupDev {
    group = 'Environment'
    description = 'Configure application for development environment (H2 database)'
    doLast {
        copy {
            from 'src/main/webapp/META-INF/context-dev.xml'
            into 'src/main/webapp/META-INF'
            rename { 'context.xml' }
        }
        println "✓ Configured for development environment (H2 database)"
        println "  - In-memory H2 database will be used"
        println "  - Database will auto-initialize with sample data"
        println "  - Run 'gradle tomcatRun' to start development server"
    }
}

// Task to setup production environment (MySQL)
task setupProd {
    group = 'Environment'
    description = 'Configure application for production environment (MySQL database)'
    doLast {
        copy {
            from 'src/main/webapp/META-INF/context-prod.xml'
            into 'src/main/webapp/META-INF'
            rename { 'context.xml' }
        }
        println "✓ Configured for production environment (MySQL database)"
        println "  - MySQL database will be used"
        println "  - Ensure MySQL is running and database 'todo' exists"
        println "  - Run database schema: src/main/resources/database/schema.sql"
        println "  - Use 'gradle warProd' to build production WAR"
    }
}

// Display current configuration
task showConfig {
    group = 'Environment'
    description = 'Show current database configuration'
    doLast {
        def contextFile = file('src/main/webapp/META-INF/context.xml')
        if (contextFile.exists()) {
            def content = contextFile.text
            if (content.contains('org.h2.Driver')) {
                println "Current configuration: DEVELOPMENT (H2 Database)"
                println "  - Database: In-memory H2"
                println "  - Auto-initialization: Enabled"
            } else if (content.contains('com.mysql.cj.jdbc.Driver')) {
                println "Current configuration: PRODUCTION (MySQL Database)" 
                println "  - Database: MySQL"
                println "  - Host: localhost:3306"
                println "  - Database: todo"
            } else {
                println "Current configuration: UNKNOWN"
            }
        } else {
            println "No context.xml found - using default H2 configuration"
        }
    }
}

// Test H2 database setup
task testH2 (type: JavaExec) {
    group = 'Verification'
    description = 'Test H2 database setup and initialization'
    dependsOn compileTestJava
    
    mainClass = 'io.github.faimoh.todowebapp.H2DatabaseTest'
    classpath = sourceSets.test.runtimeClasspath + sourceSets.main.runtimeClasspath
    
    // Add resources directory to classpath
    systemProperty 'user.dir', project.projectDir
}

// Quick development server start
task dev {
    group = 'Development'
    description = 'Start development server with H2 database'
    dependsOn setupDev
    doLast {
        println "Development environment configured!"
        println "Next step: Run 'gradle appRun' to start the server"
        println "Server will be available at: http://localhost:8080/todo"
        println "Using H2 in-memory database with sample data"
    }
}
